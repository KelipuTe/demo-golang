package main

import "fmt"

func main() {
  fmt.Println(singleNumber([]int{4, 1, 2, 1, 2}))
}

//给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次
//找出那个只出现了一次的元素。算法应该具有线性时间复杂度。不使用额外空间来实现

//位运算，异或运算
//异或运算，同0非1，0^0=0，1^0=1，0^1=1，1^1=0
//任何数和0做异或运算，结果仍然是原来的数，任何数和其自身做异或运算，结果是0
//异或运算满足交换律和结合律
//所以将整数数组所有数字异或运算依次，最终结果就是只出现一次的那个数字

//136-只出现一次的数字
func singleNumber(nums []int) int {
  iRes := 0
  for ii := 0; ii < len(nums); ii++ {
    iRes ^= nums[ii]
  }
  return iRes
}
